# AUTOGENERATED FROM:
#     'scripts/add_like_in_skill_tree.edgeql'
#     'scripts/delete_knowledge.edgeql'
#     'scripts/delete_link.edgeql'
#     'scripts/delete_skill.edgeql'
#     'scripts/insert_knowledge.edgeql'
#     'scripts/insert_link.edgeql'
#     'scripts/insert_skill.edgeql'
#     'scripts/insert_tree.edgeql'
#     'scripts/insert_user.edgeql'
#     'scripts/remove_like_in_skill_tree.edgeql'
#     'scripts/select_many_knowledge.edgeql'
#     'scripts/select_many_link.edgeql'
#     'scripts/select_many_skill_filter_tree.edgeql'
#     'scripts/select_many_tree_filter_author.edgeql'
#     'scripts/select_many_tree_filter_author_name.edgeql'
#     'scripts/select_skill.edgeql'
#     'scripts/select_tree_filter_uid.edgeql'
#     'scripts/select_user_filter_email.edgeql'
#     'scripts/select_user_filter_uid.edgeql'
#     'scripts/select_user_filter_username.edgeql'
#     'scripts/update_knowledge_info.edgeql'
#     'scripts/update_skill_info.edgeql'
#     'scripts/update_tree_info.edgeql'
#     'scripts/update_user_info.edgeql'
#     'scripts/update_user_password.edgeql'
# WITH:
#     $ edgedb-py -I metrik --target async --file .\scripts\__init__.py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AddLikeInSkillTreeResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteKnowledgeResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class DeleteLinkResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class InsertUserResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class SelectManyKnowledgeResult(NoPydanticValidation):
    author: InsertUserResult
    skill: DeleteLinkResult
    modified: datetime.datetime | None
    created: datetime.datetime | None
    id: uuid.UUID
    content: str
    name: str


@dataclasses.dataclass
class SelectManyLinkResult(NoPydanticValidation):
    id: uuid.UUID
    contains: list[DeleteLinkResult]


@dataclasses.dataclass
class SelectManySkillFilterTreeResult(NoPydanticValidation):
    author: InsertUserResult
    modified: datetime.datetime | None
    created: datetime.datetime | None
    id: uuid.UUID
    description: str | None
    name: str
    x: float
    y: float


@dataclasses.dataclass
class SelectManyTreeFilterAuthorResult(NoPydanticValidation):
    modified: datetime.datetime | None
    created: datetime.datetime | None
    id: uuid.UUID
    description: str | None
    name: str
    public: bool
    public_grades: bool


@dataclasses.dataclass
class SelectSkillResult(NoPydanticValidation):
    tree: AddLikeInSkillTreeResult
    author: InsertUserResult
    modified: datetime.datetime | None
    created: datetime.datetime | None
    id: uuid.UUID
    description: str | None
    name: str
    x: float
    y: float


@dataclasses.dataclass
class SelectTreeFilterUidResult(NoPydanticValidation):
    author: InsertUserResult
    modified: datetime.datetime | None
    created: datetime.datetime | None
    id: uuid.UUID
    description: str | None
    name: str
    public: bool
    public_grades: bool


@dataclasses.dataclass
class SelectUserFilterEmailResult(NoPydanticValidation):
    external_links: list[SelectUserFilterEmailResultExternalLinksItem]
    modified: datetime.datetime | None
    created: datetime.datetime | None
    id: uuid.UUID
    email: str
    birthdate: datetime.date | None
    first_name: str
    last_name: str
    password: str
    username: str
    avatar_url: str | None
    description: str | None
    location: str | None
    occupance: str | None


@dataclasses.dataclass
class SelectUserFilterEmailResultExternalLinksItem(NoPydanticValidation):
    id: uuid.UUID
    url: str


async def add_like_in_skill_tree(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_uid: uuid.UUID,
    tree_uid: uuid.UUID,
) -> AddLikeInSkillTreeResult | None:
    return await executor.query_single(
        """\
        with
            user := (select User filter .id = <uuid>$user_uid)
            update SkillTree
            filter .id = <uuid>$tree_uid
            and .author = user
            set {
                likes += user
            }
        ;\
        """,
        user_uid=user_uid,
        tree_uid=tree_uid,
    )


async def delete_knowledge(
    executor: edgedb.AsyncIOExecutor,
    *,
    knowledge_uid: uuid.UUID,
    author_uid: uuid.UUID,
) -> DeleteKnowledgeResult | None:
    return await executor.query_single(
        """\
        delete Knowledge
        filter .id = <uuid>$knowledge_uid and .author.id=<uuid>$author_uid
        ;\
        """,
        knowledge_uid=knowledge_uid,
        author_uid=author_uid,
    )


async def delete_link(
    executor: edgedb.AsyncIOExecutor,
    *,
    tree: uuid.UUID,
    author: uuid.UUID,
    source: uuid.UUID,
    target: uuid.UUID,
) -> DeleteLinkResult | None:
    return await executor.query_single(
        """\
        with
        tree:= (select SkillTree filter .id=<uuid>$tree and .author.id=<uuid>$author),
        update Skill filter .id=<uuid>$source and .tree.id=tree.id
        set{
            contains -= (select detached Skill filter .id=<uuid>$target)
        };\
        """,
        tree=tree,
        author=author,
        source=source,
        target=target,
    )


async def delete_skill(
    executor: edgedb.AsyncIOExecutor,
    *,
    skill_uid: uuid.UUID,
    author_uid: uuid.UUID,
) -> DeleteLinkResult | None:
    return await executor.query_single(
        """\
        delete Skill
        filter .id = <uuid>$skill_uid
        and .tree.author.id = <uuid>$author_uid;\
        """,
        skill_uid=skill_uid,
        author_uid=author_uid,
    )


async def insert_knowledge(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    content: str,
    user_uid: uuid.UUID,
    skill_uid: uuid.UUID,
) -> DeleteKnowledgeResult:
    return await executor.query_single(
        """\
        insert Knowledge {
            name := <str>$name,
            content := <str>$content,
            author := (select User filter .id = <uuid>$user_uid),
            skill := (select Skill filter .id = <uuid>$skill_uid)
        };\
        """,
        name=name,
        content=content,
        user_uid=user_uid,
        skill_uid=skill_uid,
    )


async def insert_link(
    executor: edgedb.AsyncIOExecutor,
    *,
    source: uuid.UUID,
    tree: uuid.UUID,
    target: uuid.UUID,
) -> DeleteLinkResult | None:
    return await executor.query_single(
        """\
        update Skill
        filter .id = <uuid>$source
        and .tree.id = <uuid>$tree
        set {
            contains += (
                select detached Skill
                filter .id = <uuid>$target
                and .tree.id = <uuid>$tree
            )
        };\
        """,
        source=source,
        tree=tree,
        target=target,
    )


async def insert_skill(
    executor: edgedb.AsyncIOExecutor,
    *,
    tree: uuid.UUID,
    author: uuid.UUID,
    name: str,
    description: str | None,
    x: float,
    y: float,
) -> DeleteLinkResult | None:
    return await executor.query_single(
        """\
        with
            selected_tree:=(select SkillTree{*} filter .id = <uuid>$tree and .author.id=<uuid>$author),
            new_skill:=(for _ in selected_tree union (
            insert Skill{
                name:=<str>$name,
                description:=<optional str>$description,
                author:=(select User filter .id=<uuid>$author),
                tree:=selected_tree,
                x:=<float64>$x,
                y:=<float64>$y,
                })),
        select {new_skill};\
        """,
        tree=tree,
        author=author,
        name=name,
        description=description,
        x=x,
        y=y,
    )


async def insert_tree(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
    description: str | None,
    public: bool,
    public_grades: bool,
    author: uuid.UUID,
) -> AddLikeInSkillTreeResult:
    return await executor.query_single(
        """\
        insert SkillTree {
            name := <str>$name,
            description := <optional str>$description,
            public := <bool>$public,
            public_grades := <bool>$public_grades,
            author := (select User filter .id = <uuid>$author),
        };\
        """,
        name=name,
        description=description,
        public=public,
        public_grades=public_grades,
        author=author,
    )


async def insert_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    first_name: str,
    last_name: str,
    birthdate: datetime.date | None,
    email: str,
    password: str,
) -> InsertUserResult | None:
    return await executor.query_single(
        """\
        insert User{
            username := <str>$username,
            first_name := <str>$first_name,
            last_name := <str>$last_name,
            birthdate := <optional cal::local_date>$birthdate,
            email := <str>$email,
            password := <str>$password
        }
        unless conflict;\
        """,
        username=username,
        first_name=first_name,
        last_name=last_name,
        birthdate=birthdate,
        email=email,
        password=password,
    )


async def remove_like_in_skill_tree(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_uid: uuid.UUID,
    tree_uid: uuid.UUID,
) -> AddLikeInSkillTreeResult | None:
    return await executor.query_single(
        """\
        with
            user := (select User filter .id = <uuid>$user_uid)
            update SkillTree
            filter .id = <uuid>$tree_uid
            and .author = user
            set {
                likes -= user
            }
        ;\
        """,
        user_uid=user_uid,
        tree_uid=tree_uid,
    )


async def select_many_knowledge(
    executor: edgedb.AsyncIOExecutor,
    *,
    skill_uid: uuid.UUID,
    user_uid: uuid.UUID,
) -> list[SelectManyKnowledgeResult]:
    return await executor.query(
        """\
        select Knowledge {*, author, skill}
        filter .skill.id=<uuid>$skill_uid
           and .author.id=<uuid>$user_uid
        ;\
        """,
        skill_uid=skill_uid,
        user_uid=user_uid,
    )


async def select_many_link(
    executor: edgedb.AsyncIOExecutor,
    *,
    tree: uuid.UUID,
    author: uuid.UUID,
) -> list[SelectManyLinkResult]:
    return await executor.query(
        """\
        select Skill {id, contains}
        filter .tree.id = <uuid>$tree
        and .tree.author.id = <uuid>$author;\
        """,
        tree=tree,
        author=author,
    )


async def select_many_skill_filter_tree(
    executor: edgedb.AsyncIOExecutor,
    *,
    tree: uuid.UUID,
    user: uuid.UUID,
) -> list[SelectManySkillFilterTreeResult]:
    return await executor.query(
        """\
        select Skill {*, author} filter .tree.id=<uuid>$tree and (.tree.public=true or .tree.author.id=<uuid>$user);\
        """,
        tree=tree,
        user=user,
    )


async def select_many_tree_filter_author(
    executor: edgedb.AsyncIOExecutor,
    *,
    author: uuid.UUID,
    public: bool | None,
    offset: int,
    limit: int,
) -> list[SelectManyTreeFilterAuthorResult]:
    return await executor.query(
        """\
        select SkillTree { * }
        filter .author.id = <uuid>$author
        and .public in (select {<optional bool>$public} ?? {false, true})
        order by .created desc
        offset <int64>$offset
        limit <int64>$limit;\
        """,
        author=author,
        public=public,
        offset=offset,
        limit=limit,
    )


async def select_many_tree_filter_author_name(
    executor: edgedb.AsyncIOExecutor,
    *,
    author: uuid.UUID,
    public: bool | None,
    name: str,
    offset: int,
    limit: int,
) -> list[SelectManyTreeFilterAuthorResult]:
    return await executor.query(
        """\
        select SkillTree { * }
        filter .author.id = <uuid>$author
        and .public in (select {<optional bool>$public} ?? {false, true})
        and .name like <str>$name
        order by .created desc
        offset <int64>$offset
        limit <int64>$limit;\
        """,
        author=author,
        public=public,
        name=name,
        offset=offset,
        limit=limit,
    )


async def select_skill(
    executor: edgedb.AsyncIOExecutor,
    *,
    skill_uid: uuid.UUID,
    author_uid: uuid.UUID,
) -> SelectSkillResult | None:
    return await executor.query_single(
        """\
        select Skill { *, tree, author }
        filter .id = <uuid>$skill_uid
        and .tree.author.id = <uuid>$author_uid;\
        """,
        skill_uid=skill_uid,
        author_uid=author_uid,
    )


async def select_tree_filter_uid(
    executor: edgedb.AsyncIOExecutor,
    *,
    uid: uuid.UUID,
) -> SelectTreeFilterUidResult | None:
    return await executor.query_single(
        """\
        select SkillTree { author, * } filter .id = <uuid>$uid;\
        """,
        uid=uid,
    )


async def select_user_filter_email(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
) -> SelectUserFilterEmailResult | None:
    return await executor.query_single(
        """\
        select User{
            *,
            external_links := .<user[is ExternalLink] { url }
        }
        filter .email=<str>$email;\
        """,
        email=email,
    )


async def select_user_filter_uid(
    executor: edgedb.AsyncIOExecutor,
    *,
    uid: uuid.UUID,
) -> SelectUserFilterEmailResult | None:
    return await executor.query_single(
        """\
        select User{
            *,
            external_links := .<user[is ExternalLink] { url }
        }
        filter .id=<uuid>$uid;\
        """,
        uid=uid,
    )


async def select_user_filter_username(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
) -> SelectUserFilterEmailResult | None:
    return await executor.query_single(
        """\
        select User{
            *,
            external_links := .<user[is ExternalLink] { url }
        }
        filter .username=<str>$username;\
        """,
        username=username,
    )


async def update_knowledge_info(
    executor: edgedb.AsyncIOExecutor,
    *,
    knowledge_uid: uuid.UUID,
    author_uid: uuid.UUID,
    name: str,
    content: str,
) -> DeleteKnowledgeResult | None:
    return await executor.query_single(
        """\
        update Knowledge
        filter .id = <uuid>$knowledge_uid and .author.id=<uuid>$author_uid
        set{
            name:=<str>$name,
            content:=<str>$content,
        };\
        """,
        knowledge_uid=knowledge_uid,
        author_uid=author_uid,
        name=name,
        content=content,
    )


async def update_skill_info(
    executor: edgedb.AsyncIOExecutor,
    *,
    skill: uuid.UUID,
    author: uuid.UUID,
    name: str,
    description: str | None,
    x: float,
    y: float,
) -> DeleteLinkResult | None:
    return await executor.query_single(
        """\
        update Skill
        filter .id = <uuid>$skill and .tree.author.id=<uuid>$author
        set{
            name:=<str>$name,
            description:=<optional str>$description,
            x:=<float64>$x,
            y:=<float64>$y
        };\
        """,
        skill=skill,
        author=author,
        name=name,
        description=description,
        x=x,
        y=y,
    )


async def update_tree_info(
    executor: edgedb.AsyncIOExecutor,
    *,
    uid: uuid.UUID,
    author: uuid.UUID,
    name: str,
    description: str | None,
) -> AddLikeInSkillTreeResult | None:
    return await executor.query_single(
        """\
        update SkillTree
        filter .id = <uuid>$uid and .author.id = <uuid>$author
        set {
            name := <str>$name,
            description := <optional str>$description
        };\
        """,
        uid=uid,
        author=author,
        name=name,
        description=description,
    )


async def update_user_info(
    executor: edgedb.AsyncIOExecutor,
    *,
    uid: uuid.UUID,
    first_name: str,
    last_name: str,
    birthdate: datetime.date | None,
    description: str | None,
    location: str | None,
    occupance: str | None,
) -> InsertUserResult | None:
    return await executor.query_single(
        """\
        update User filter .id = <uuid>$uid
        set {
            first_name := <str>$first_name,
            last_name := <str>$last_name,
            birthdate := <optional cal::local_date>$birthdate,
            description := <optional str>$description,
            location := <optional str>$location,
            occupance := <optional str>$occupance
        };\
        """,
        uid=uid,
        first_name=first_name,
        last_name=last_name,
        birthdate=birthdate,
        description=description,
        location=location,
        occupance=occupance,
    )


async def update_user_password(
    executor: edgedb.AsyncIOExecutor,
    *,
    uid: uuid.UUID,
    password: str,
) -> InsertUserResult | None:
    return await executor.query_single(
        """\
        update User filter .id = <uuid>$uid
        set {
            password := <str>$password
        };\
        """,
        uid=uid,
        password=password,
    )
